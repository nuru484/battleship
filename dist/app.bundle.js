(()=>{"use strict";const e=new class{constructor(){this.gameGrid=((e,t)=>{let i=[],s=0;for(let e=0;e<10;e++){i[e]=[];for(let t=0;t<10;t++)i[e][t]=s++}return console.table(i),console.log(i.length),i})(),this.ships=[]}placeShip(e,t,i){if(t>=0&&t<this.gameGrid.length&&i>=0&&i<this.gameGrid.length){for(let s=0;s<e.length;s++)if(null===this.gameGrid[t][i+s]||"ship"===this.gameGrid[t][i+s])return void console.log(`Cannot place ship at (${t}, ${i}). There's already a ship there.`);e.startRow=t,e.startColumn=i;for(let s=0;s<e.length;s++)this.gameGrid[t][i+s]="ship";this.ships.push(e)}else console.log(`Invalid coordinates (${t}, ${i}).`)}receiveAttack(e,t){if(e>=0&&e<this.gameGrid.length&&t>=0&&t<this.gameGrid[0].length){if("ship"===this.gameGrid[e][t]){for(const i of this.ships)if(e===i.startRow&&t>=i.startColumn&&t<i.startColumn+i.length)return i.hit(),this.gameGrid[e][t]="hit",void console.log("Hit!")}else if("hit"===this.gameGrid[e][t]||"missed"===this.gameGrid[e][t])return void console.log("Can't hit same spot or missed spot")}else console.log(`Invalid coordinates (${e}, ${t}).`);"number"==typeof this.gameGrid[e][t]&&(this.gameGrid[e][t]="missed")}gameOver(){let e=!0;for(const t of this.ships)if(!t.isSunk()){e=!1;break}if(e)return"Game Over"}},t=new class{constructor(e,t){this.length=e,this.hitTimes=t}hit(){this.isSunk()||this.hitTimes++}isSunk(){return this.hitTimes===this.length}}(5,0);e.placeShip(t,2,3),e.receiveAttack(2,3),e.receiveAttack(2,4),e.receiveAttack(2,5),e.receiveAttack(2,6),e.receiveAttack(2,7),e.gameOver()})();
//# sourceMappingURL=app.bundle.js.map