{"version":3,"file":"app.bundle.js","mappings":"mBAgIEA,QAAQC,IAAI,eAKd,MAAMC,EAAQ,IA/Fd,MACE,WAAAC,GACEC,KAAKC,SAlBa,EAACC,EAAMC,KAC3B,MAAMC,EAAO,GACb,IAAIC,EAAQ,EAGZ,IAAK,IAAIC,EAAI,EAAGA,EAagB,GAbNA,IAAK,CAC7BF,EAAKE,GAAK,GACV,IAAK,IAAIC,EAAI,EAAGA,EAWkB,GAXLA,IAC3BH,EAAKE,GAAGC,GAAKF,GAEjB,CAEA,OAAOD,CAAI,EAMOI,GAChBR,KAAKS,MAAQ,EACf,CAEA,SAAAC,CAAUC,EAAMC,EAAKC,GACnB,GACED,GAAO,GACPA,EAAMZ,KAAKC,SAASa,QACpBD,GAAU,GACVA,EAASb,KAAKC,SAASa,OACvB,CAEA,IAAK,IAAIR,EAAI,EAAGA,EAAIK,EAAKG,OAAQR,IAC/B,GACqC,OAAnCN,KAAKC,SAASW,GAAKC,EAASP,IACO,SAAnCN,KAAKC,SAASW,GAAKC,EAASP,GAK5B,YAHAV,QAAQC,IACN,yBAAyBe,MAAQC,qCAMvC,GAAIA,EAASF,EAAKG,QAAUd,KAAKC,SAASW,GAAKE,OAAQ,CAErDH,EAAKI,SAAWH,EAChBD,EAAKK,YAAcH,EACnB,IAAK,IAAIP,EAAI,EAAGA,EAAIK,EAAKG,OAAQR,IAC/BN,KAAKC,SAASW,GAAKC,EAASP,GAAK,OAEnCN,KAAKS,MAAMQ,KAAKN,EAClB,MACEf,QAAQC,IAAI,oCAEhB,MACED,QAAQC,IAAI,wBAAwBe,MAAQC,MAEhD,CAEA,aAAAK,CAAcN,EAAKC,GACjB,GACED,GAAO,GACPA,EAAMZ,KAAKC,SAASa,QACpBD,GAAU,GACVA,EAASb,KAAKC,SAAS,GAAGa,QAE1B,GAAmC,SAA/Bd,KAAKC,SAASW,GAAKC,GAAoB,CACzC,MAAMM,EAAUnB,KAAKS,MAAMW,MACxBT,GACCC,IAAQD,EAAKI,UACbF,GAAUF,EAAKK,aACfH,EAASF,EAAKK,YAAcL,EAAKG,SAGrC,GAAIK,EAIF,OAHAA,EAAQE,MACRrB,KAAKC,SAASW,GAAKC,GAAU,WAC7BjB,QAAQC,IAAI,OAGhB,MAAO,GAC0B,QAA/BG,KAAKC,SAASW,GAAKC,IACY,WAA/Bb,KAAKC,SAASW,GAAKC,GAGnB,YADAjB,QAAQC,IAAI,2CAIdD,QAAQC,IAAI,wBAAwBe,MAAQC,OAGJ,iBAA/Bb,KAAKC,SAASW,GAAKC,KAC5Bb,KAAKC,SAASW,GAAKC,GAAU,SAEjC,CAEA,QAAAS,GAGE,GAFmBtB,KAAKS,MAAMc,OAAOZ,GAASA,EAAKa,WAGjD,MAAO,WAGX,GAUIC,EAAS,IArIf,MACE,WAAA1B,CAAYe,EAAQY,GAClB1B,KAAKc,OAASA,EACdd,KAAK0B,SAAWA,CAClB,CAEA,GAAAL,GACOrB,KAAKwB,WACRxB,KAAK0B,UAAY,EAErB,CAEA,MAAAF,GACE,OAAIxB,KAAK0B,WAAa1B,KAAKc,MAI7B,GAoHsB,EAAG,GAC3BhB,EAAMY,UAAUe,EAAQ,EAAG,GAE3B3B,EAAMoB,cAAc,EAAG,GACvBpB,EAAMoB,cAAc,EAAG,GACvBpB,EAAMoB,cAAc,EAAG,GACvBpB,EAAMoB,cAAc,EAAG,GACvBpB,EAAMoB,cAAc,EAAG,GAEvBpB,EAAMY,UAAUe,EAAQ,EAAG,GAE3B3B,EAAMwB,U","sources":["webpack://battleship/./src/js-files/app-logic.js"],"sourcesContent":["// Ship class\nclass Ship {\n  constructor(length, hitTimes) {\n    this.length = length;\n    this.hitTimes = hitTimes;\n  }\n\n  hit() {\n    if (!this.isSunk()) {\n      this.hitTimes += 1;\n    }\n  }\n\n  isSunk() {\n    if (this.hitTimes === this.length) {\n      return true;\n    }\n    return false;\n  }\n}\n\n// Gameboard grid function\nconst gameboardGrid = (rows, columns) => {\n  const grid = [];\n  let value = 0;\n\n  // Two dimensional array\n  for (let i = 0; i < rows; i++) {\n    grid[i] = [];\n    for (let j = 0; j < columns; j++) {\n      grid[i][j] = value++;\n    }\n  }\n\n  return grid;\n};\n\n// Gameboard class\nclass Gameboard {\n  constructor() {\n    this.gameGrid = gameboardGrid(10, 10);\n    this.ships = [];\n  }\n\n  placeShip(ship, row, column) {\n    if (\n      row >= 0 &&\n      row < this.gameGrid.length &&\n      column >= 0 &&\n      column < this.gameGrid.length\n    ) {\n      // Check if ship can be placed\n      for (let i = 0; i < ship.length; i++) {\n        if (\n          this.gameGrid[row][column + i] === null ||\n          this.gameGrid[row][column + i] === 'ship'\n        ) {\n          console.log(\n            `Cannot place ship at (${row}, ${column}). There's already a ship there.`\n          );\n          return;\n        }\n      }\n\n      if (column + ship.length <= this.gameGrid[row].length) {\n        // Place ship\n        ship.startRow = row;\n        ship.startColumn = column;\n        for (let i = 0; i < ship.length; i++) {\n          this.gameGrid[row][column + i] = 'ship';\n        }\n        this.ships.push(ship);\n      } else {\n        console.log(`Ship does not fit within the row.`);\n      }\n    } else {\n      console.log(`Invalid coordinates (${row}, ${column}).`);\n    }\n  }\n\n  receiveAttack(row, column) {\n    if (\n      row >= 0 &&\n      row < this.gameGrid.length &&\n      column >= 0 &&\n      column < this.gameGrid[0].length\n    ) {\n      if (this.gameGrid[row][column] === 'ship') {\n        const hitShip = this.ships.find(\n          (ship) =>\n            row === ship.startRow &&\n            column >= ship.startColumn &&\n            column < ship.startColumn + ship.length\n        );\n\n        if (hitShip) {\n          hitShip.hit();\n          this.gameGrid[row][column] = 'hit';\n          console.log('Hit!');\n          return;\n        }\n      } else if (\n        this.gameGrid[row][column] === 'hit' ||\n        this.gameGrid[row][column] === 'missed'\n      ) {\n        console.log(`Can't hit same spot or missed spot`);\n        return;\n      }\n    } else {\n      console.log(`Invalid coordinates (${row}, ${column}).`);\n    }\n\n    if (typeof this.gameGrid[row][column] === 'number') {\n      this.gameGrid[row][column] = 'missed';\n    }\n  }\n\n  gameOver() {\n    const gameIsOver = this.ships.every((ship) => ship.isSunk());\n\n    if (gameIsOver) {\n      return 'Game Over';\n    }\n    return undefined;\n  }\n}\n\nconst player = () => {\n  console.log('hello world');\n};\n\nplayer();\n\nconst start = new Gameboard();\nconst myShip = new Ship(5, 0);\nstart.placeShip(myShip, 2, 3);\n\nstart.receiveAttack(2, 3);\nstart.receiveAttack(2, 4);\nstart.receiveAttack(2, 5);\nstart.receiveAttack(2, 6);\nstart.receiveAttack(2, 7);\n\nstart.placeShip(myShip, 2, 7);\n\nstart.gameOver();\n\nexport { Ship, Gameboard };\n"],"names":["console","log","start","constructor","this","gameGrid","rows","columns","grid","value","i","j","gameboardGrid","ships","placeShip","ship","row","column","length","startRow","startColumn","push","receiveAttack","hitShip","find","hit","gameOver","every","isSunk","myShip","hitTimes"],"sourceRoot":""}