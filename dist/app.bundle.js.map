{"version":3,"file":"app.bundle.js","mappings":"mBAkIA,MAAMA,EAAQ,IA1Fd,MACE,WAAAC,GACEC,KAAKC,SApBa,EAACC,EAAMC,KAC3B,IAAIC,EAAO,GACPC,EAAQ,EAGZ,IAAK,IAAIC,EAAI,EAAGA,EAegB,GAfNA,IAAK,CAC7BF,EAAKE,GAAK,GACV,IAAK,IAAIC,EAAI,EAAGA,EAakB,GAbLA,IAC3BH,EAAKE,GAAGC,GAAKF,GAEjB,CAIA,OAHAG,QAAQC,MAAML,GACdI,QAAQE,IAAIN,EAAKO,QAEVP,CAAI,EAMOQ,GAChBZ,KAAKa,MAAQ,EACf,CAEA,SAAAC,CAAUC,EAAMC,EAAKC,GACnB,GACED,GAAO,GACPA,EAAMhB,KAAKC,SAASU,QACpBM,GAAU,GACVA,EAASjB,KAAKC,SAASU,OACvB,CAEA,IAAK,IAAIL,EAAI,EAAGA,EAAIS,EAAKJ,OAAQL,IAC/B,GACqC,OAAnCN,KAAKC,SAASe,GAAKC,EAASX,IACO,SAAnCN,KAAKC,SAASe,GAAKC,EAASX,GAK5B,YAHAE,QAAQE,IACN,yBAAyBM,MAAQC,qCAOvCF,EAAKG,SAAWF,EAChBD,EAAKI,YAAcF,EACnB,IAAK,IAAIX,EAAI,EAAGA,EAAIS,EAAKJ,OAAQL,IAC/BN,KAAKC,SAASe,GAAKC,EAASX,GAAK,OAEnCN,KAAKa,MAAMO,KAAKL,EAClB,MACEP,QAAQE,IAAI,wBAAwBM,MAAQC,MAEhD,CAEA,aAAAI,CAAcL,EAAKC,GACjB,GACED,GAAO,GACPA,EAAMhB,KAAKC,SAASU,QACpBM,GAAU,GACVA,EAASjB,KAAKC,SAAS,GAAGU,QAE1B,GAAmC,SAA/BX,KAAKC,SAASe,GAAKC,IACrB,IAAK,MAAMF,KAAQf,KAAKa,MACtB,GACEG,IAAQD,EAAKG,UACbD,GAAUF,EAAKI,aACfF,EAASF,EAAKI,YAAcJ,EAAKJ,OAKjC,OAHAI,EAAKO,MACLtB,KAAKC,SAASe,GAAKC,GAAU,WAC7BT,QAAQE,IAAI,aAIX,GAC0B,QAA/BV,KAAKC,SAASe,GAAKC,IACY,WAA/BjB,KAAKC,SAASe,GAAKC,GAGnB,YADAT,QAAQE,IAAI,2CAIdF,QAAQE,IAAI,wBAAwBM,MAAQC,OAGJ,iBAA/BjB,KAAKC,SAASe,GAAKC,KAC5BjB,KAAKC,SAASe,GAAKC,GAAU,SAEjC,CAEA,QAAAM,GACE,IAAIC,GAAa,EAEjB,IAAK,MAAMT,KAAQf,KAAKa,MACtB,IAAKE,EAAKU,SAAU,CAClBD,GAAa,EACb,KACF,CAGF,GAAIA,EACF,MAAO,WAEX,GAKIE,EAAS,IAnIf,MACE,WAAA3B,CAAYY,EAAQgB,GAClB3B,KAAKW,OAASA,EACdX,KAAK2B,SAAWA,CAClB,CAEA,GAAAL,GACOtB,KAAKyB,UACRzB,KAAK2B,UAET,CAEA,MAAAF,GACE,OAAIzB,KAAK2B,WAAa3B,KAAKW,MAI7B,GAkHsB,EAAG,GAE3Bb,EAAMgB,UAAUY,EAAQ,EAAG,GAE3B5B,EAAMuB,cAAc,EAAG,GACvBvB,EAAMuB,cAAc,EAAG,GACvBvB,EAAMuB,cAAc,EAAG,GACvBvB,EAAMuB,cAAc,EAAG,GACvBvB,EAAMuB,cAAc,EAAG,GAEvBvB,EAAMyB,U","sources":["webpack://battleship/./src/js-files/app-logic.js"],"sourcesContent":["// Ship class\nclass Ship {\n  constructor(length, hitTimes) {\n    this.length = length;\n    this.hitTimes = hitTimes;\n  }\n\n  hit() {\n    if (!this.isSunk()) {\n      this.hitTimes++;\n    }\n  }\n\n  isSunk() {\n    if (this.hitTimes === this.length) {\n      return true;\n    }\n    return false;\n  }\n}\n\n// Gameboard grid function\nconst gameboardGrid = (rows, columns) => {\n  let grid = [];\n  let value = 0;\n\n  // Two dimensional array\n  for (let i = 0; i < rows; i++) {\n    grid[i] = [];\n    for (let j = 0; j < columns; j++) {\n      grid[i][j] = value++;\n    }\n  }\n  console.table(grid);\n  console.log(grid.length);\n\n  return grid;\n};\n\n// Gameboard class\nclass Gameboard {\n  constructor() {\n    this.gameGrid = gameboardGrid(10, 10);\n    this.ships = [];\n  }\n\n  placeShip(ship, row, column) {\n    if (\n      row >= 0 &&\n      row < this.gameGrid.length &&\n      column >= 0 &&\n      column < this.gameGrid.length\n    ) {\n      // Check if ship can be placed\n      for (let i = 0; i < ship.length; i++) {\n        if (\n          this.gameGrid[row][column + i] === null ||\n          this.gameGrid[row][column + i] === 'ship'\n        ) {\n          console.log(\n            `Cannot place ship at (${row}, ${column}). There's already a ship there.`\n          );\n          return;\n        }\n      }\n\n      // Place ship\n      ship.startRow = row;\n      ship.startColumn = column;\n      for (let i = 0; i < ship.length; i++) {\n        this.gameGrid[row][column + i] = 'ship';\n      }\n      this.ships.push(ship);\n    } else {\n      console.log(`Invalid coordinates (${row}, ${column}).`);\n    }\n  }\n\n  receiveAttack(row, column) {\n    if (\n      row >= 0 &&\n      row < this.gameGrid.length &&\n      column >= 0 &&\n      column < this.gameGrid[0].length\n    ) {\n      if (this.gameGrid[row][column] === 'ship') {\n        for (const ship of this.ships) {\n          if (\n            row === ship.startRow &&\n            column >= ship.startColumn &&\n            column < ship.startColumn + ship.length\n          ) {\n            ship.hit();\n            this.gameGrid[row][column] = 'hit';\n            console.log('Hit!');\n            return;\n          }\n        }\n      } else if (\n        this.gameGrid[row][column] === 'hit' ||\n        this.gameGrid[row][column] === 'missed'\n      ) {\n        console.log(`Can't hit same spot or missed spot`);\n        return;\n      }\n    } else {\n      console.log(`Invalid coordinates (${row}, ${column}).`);\n    }\n\n    if (typeof this.gameGrid[row][column] === 'number') {\n      this.gameGrid[row][column] = 'missed';\n    }\n  }\n\n  gameOver() {\n    let gameIsOver = true;\n\n    for (const ship of this.ships) {\n      if (!ship.isSunk()) {\n        gameIsOver = false;\n        break;\n      }\n    }\n\n    if (gameIsOver) {\n      return 'Game Over';\n    }\n  }\n}\n\nconst start = new Gameboard();\n\nconst myShip = new Ship(5, 0);\n\nstart.placeShip(myShip, 2, 3);\n\nstart.receiveAttack(2, 3);\nstart.receiveAttack(2, 4);\nstart.receiveAttack(2, 5);\nstart.receiveAttack(2, 6);\nstart.receiveAttack(2, 7);\n\nstart.gameOver();\n\nexport { Ship, Gameboard };\n"],"names":["start","constructor","this","gameGrid","rows","columns","grid","value","i","j","console","table","log","length","gameboardGrid","ships","placeShip","ship","row","column","startRow","startColumn","push","receiveAttack","hit","gameOver","gameIsOver","isSunk","myShip","hitTimes"],"sourceRoot":""}