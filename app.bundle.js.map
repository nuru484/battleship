{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://battleship/./src/js-files/app-logic.js"],"sourcesContent":["// Ship class\nclass Ship {\n  constructor(length, hitTimes) {\n    this.length = length;\n    this.hitTimes = hitTimes;\n  }\n\n  hit() {\n    if (!this.isSunk()) {\n      this.hitTimes += 1;\n    }\n  }\n\n  isSunk() {\n    if (this.hitTimes === this.length) {\n      return true;\n    }\n    return false;\n  }\n}\n\n// Gameboard grid function\nconst gameboardGrid = (rows, columns) => {\n  const grid = [];\n  let value = 0;\n\n  // Two dimensional array\n  for (let i = 0; i < rows; i++) {\n    grid[i] = [];\n    for (let j = 0; j < columns; j++) {\n      grid[i][j] = value++;\n    }\n  }\n\n  return grid;\n};\n\n// Gameboard class\nclass Gameboard {\n  constructor() {\n    this.gameGrid = gameboardGrid(10, 10);\n    this.ships = [];\n  }\n\n  placeShip(ship, row, column) {\n    if (\n      row >= 0 &&\n      row < this.gameGrid.length &&\n      column >= 0 &&\n      column < this.gameGrid.length\n    ) {\n      // Check if ship can be placed\n      for (let i = 0; i < ship.length; i++) {\n        if (\n          this.gameGrid[row][column + i] === null ||\n          this.gameGrid[row][column + i] === 'ship'\n        ) {\n          return;\n        }\n      }\n\n      if (column + ship.length <= this.gameGrid[row].length) {\n        // Place ship\n        ship.startRow = row;\n        ship.startColumn = column;\n        for (let i = 0; i < ship.length; i++) {\n          this.gameGrid[row][column + i] = 'ship';\n        }\n        this.ships.push(ship);\n      }\n    }\n  }\n\n  receiveAttack(row, column) {\n    if (\n      row >= 0 &&\n      row < this.gameGrid.length &&\n      column >= 0 &&\n      column < this.gameGrid[0].length\n    ) {\n      if (this.gameGrid[row][column] === 'ship') {\n        const hitShip = this.ships.find(\n          (ship) =>\n            row === ship.startRow &&\n            column >= ship.startColumn &&\n            column < ship.startColumn + ship.length\n        );\n\n        if (hitShip) {\n          hitShip.hit();\n          this.gameGrid[row][column] = 'hit';\n          return;\n        }\n      } else if (\n        this.gameGrid[row][column] === 'hit' ||\n        this.gameGrid[row][column] === 'missed'\n      ) {\n        return;\n      }\n    }\n    if (typeof this.gameGrid[row][column] === 'number') {\n      this.gameGrid[row][column] = 'missed';\n    }\n  }\n\n  gameOver() {\n    const gameIsOver = this.ships.every((ship) => ship.isSunk());\n\n    if (gameIsOver) {\n      return 'Game Over';\n    }\n    return undefined;\n  }\n}\n\nclass Player {\n  constructor() {\n    this.gameboard = null;\n  }\n\n  startGame() {\n    this.gameboard = new Gameboard();\n  }\n\n  createShip(row, column) {\n    return new Ship(row, column);\n  }\n\n  placeShip(ship, row, column) {\n    if (this.gameboard) {\n      this.gameboard.placeShip(ship, row, column);\n    }\n  }\n\n  attack(opponent, row, column) {\n    opponent.gameboard.receiveAttack(row, column);\n  }\n}\n\n// Creating player and computer instance from Player class\nconst player = new Player();\nplayer.startGame();\nconst playerShip = player.createShip(5, 0);\nplayer.placeShip(playerShip, 2, 3);\n\n// console.table(player.gameboard.gameGrid);\n// console.log(playerShip);\n\nconst computer = new Player();\ncomputer.startGame();\nconst computerShip = computer.createShip(5, 0);\ncomputer.placeShip(computerShip, 3, 3);\n\n// Computer attacks player\ncomputer.attack(player, 2, 3);\ncomputer.attack(player, 2, 4);\ncomputer.attack(player, 2, 5);\ncomputer.attack(player, 2, 6);\ncomputer.attack(player, 2, 7);\n\n// Computer attacks already hit spot\ncomputer.attack(player, 2, 7);\n\n// Computer attacks and missed\ncomputer.attack(player, 3, 6);\n\n// console.table(player.gameboard.gameGrid);\n// console.log(playerShip);\n\nexport { Ship, Gameboard, Player };\n"],"names":["Ship","constructor","length","hitTimes","this","hit","isSunk","Gameboard","gameGrid","rows","columns","grid","value","i","j","gameboardGrid","ships","placeShip","ship","row","column","startRow","startColumn","push","receiveAttack","hitShip","find","gameOver","every","Player","gameboard","startGame","createShip","attack","opponent","player","playerShip","computer","computerShip"],"sourceRoot":""}