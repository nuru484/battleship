{"version":3,"file":"app.bundle.js","mappings":"sBAAAA,QAAQC,IAAI,wB,GCCRC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,C,mBCqH6B,IAAIG,IAAjC,MAIMC,OAAaC,EACnBZ,QAAQC,IAAIU,EAAWE,GACvBb,QAAQC,IAAIU,EAAWG,G","sources":["webpack://battleship/./src/js-files/dom.js","webpack://battleship/webpack/bootstrap","webpack://battleship/./src/js-files/app-logic.js"],"sourcesContent":["console.log('hello dom interaction');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// Ship class\nclass Ship {\n  constructor(length, hitTimes) {\n    this.length = length;\n    this.hitTimes = hitTimes;\n  }\n\n  hit() {\n    if (!this.isSunk()) {\n      this.hitTimes += 1;\n    }\n  }\n\n  isSunk() {\n    if (this.hitTimes === this.length) {\n      return true;\n    }\n    return false;\n  }\n}\n\n// Gameboard grid function\nconst gameboardGrid = (rows, columns) => {\n  const grid = [];\n  let value = 0;\n\n  // Two dimensional array\n  for (let i = 0; i < rows; i++) {\n    grid[i] = [];\n    for (let j = 0; j < columns; j++) {\n      grid[i][j] = value++;\n    }\n  }\n\n  return grid;\n};\n\n// Gameboard class\nclass Gameboard {\n  constructor() {\n    this.gameGrid = gameboardGrid(10, 10);\n    this.ships = [];\n  }\n\n  placeShip(ship, row, column) {\n    if (\n      row >= 0 &&\n      row < this.gameGrid.length &&\n      column >= 0 &&\n      column < this.gameGrid.length\n    ) {\n      // Check if ship can be placed\n      for (let i = 0; i < ship.length; i++) {\n        if (\n          this.gameGrid[row][column + i] === null ||\n          this.gameGrid[row][column + i] === 'ship'\n        ) {\n          return;\n        }\n      }\n\n      if (column + ship.length <= this.gameGrid[row].length) {\n        // Place ship\n        ship.startRow = row;\n        ship.startColumn = column;\n        for (let i = 0; i < ship.length; i++) {\n          this.gameGrid[row][column + i] = 'ship';\n        }\n        this.ships.push(ship);\n      }\n    }\n  }\n\n  receiveAttack(row, column) {\n    if (\n      row >= 0 &&\n      row < this.gameGrid.length &&\n      column >= 0 &&\n      column < this.gameGrid[0].length\n    ) {\n      if (this.gameGrid[row][column] === 'ship') {\n        const hitShip = this.ships.find(\n          (ship) =>\n            row === ship.startRow &&\n            column >= ship.startColumn &&\n            column < ship.startColumn + ship.length\n        );\n\n        if (hitShip) {\n          hitShip.hit();\n          this.gameGrid[row][column] = 'hit';\n          return;\n        }\n      } else if (\n        this.gameGrid[row][column] === 'hit' ||\n        this.gameGrid[row][column] === 'missed'\n      ) {\n        return;\n      }\n    }\n    if (typeof this.gameGrid[row][column] === 'number') {\n      this.gameGrid[row][column] = 'missed';\n    }\n  }\n\n  gameOver() {\n    const gameIsOver = this.ships.every((ship) => ship.isSunk());\n\n    if (gameIsOver) {\n      return 'Game Over';\n    }\n    return undefined;\n  }\n}\n\nclass Player {\n  constructor() {\n    this.gameboard = null;\n  }\n\n  startGame() {\n    this.gameboard = new Gameboard();\n  }\n\n  createShip(row, column) {\n    return new Ship(row, column);\n  }\n\n  placeShip(ship, row, column) {\n    if (this.gameboard) {\n      this.gameboard.placeShip(ship, row, column);\n    }\n  }\n\n  attack(opponent, row, column) {\n    opponent.gameboard.receiveAttack(row, column);\n  }\n}\n\nconst generatedCoordinates = new Set();\nconst generateCoordinates = () => {};\n\n// Example usage\nconst cordinates = generateCoordinates();\nconsole.log(cordinates.x);\nconsole.log(cordinates.y);\n\nexport { Ship, Gameboard, Player, generateCoordinates };\n"],"names":["console","log","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","Set","cordinates","generateCoordinates","x","y"],"sourceRoot":""}